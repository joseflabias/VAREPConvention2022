"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

;

class HorizontalPicker extends _react.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "paddingSide", void 0);

    _defineProperty(this, "refScrollView", void 0);

    _defineProperty(this, "ignoreNextScroll", void 0);

    _defineProperty(this, "timeoutDelayedSnap", void 0);

    _defineProperty(this, "currentPositionX", void 0);

    _defineProperty(this, "defaultScrollEventThrottle", 16);

    _defineProperty(this, "defaultDecelerationRate", _reactNative.Platform.OS == "ios" ? 50 : 0.9);

    _defineProperty(this, "defaultSnapTimeout", 500);

    _defineProperty(this, "onLayoutScrollView", e => {
      setTimeout(this.scrollToDefaultIndex, 0);
      const {
        width
      } = e.nativeEvent.layout;
      this.setState(() => ({
        scrollViewWidth: width
      }));
      this.paddingSide = width / 2 - this.props.itemWidth / 2;

      if (this.props.onLayout != null) {
        this.props.onLayout(e);
      }
    });

    _defineProperty(this, "onScroll", e => {
      this.currentPositionX = e.nativeEvent.contentOffset.x;

      if (this.props.onScroll != null) {
        this.props.onScroll(e);
      }
    });

    _defineProperty(this, "onScrollBeginDrag", e => {
      this.ignoreNextScroll = false;

      if (this.props.onScrollBeginDrag != null) {
        this.props.onScrollBeginDrag(e);
      }
    });

    _defineProperty(this, "onScrollEndDrag", e => {
      this.cancelDelayedSnap();

      if (this.ignoreNextScroll) {
        this.ignoreNextScroll = false;
      } else {
        this.setDelayedSnap();
      }

      if (this.props.onScrollEndDrag != null) {
        this.props.onScrollEndDrag(e);
      }
    });

    _defineProperty(this, "onMomentumScrollBegin", e => {
      this.ignoreNextScroll = false;
      this.setDelayedSnap();

      if (this.props.onMomentumScrollBegin != null) {
        this.props.onMomentumScrollBegin(e);
      }
    });

    _defineProperty(this, "onMomentumScrollEnd", e => {
      if (this.ignoreNextScroll) {
        this.ignoreNextScroll = false;
      } else {
        this.setDelayedSnap();
      }

      if (this.props.onMomentumScrollEnd != null) {
        this.props.onMomentumScrollEnd(e);
      }
    });

    _defineProperty(this, "scrollToPosition", position => {
      const {
        itemWidth,
        onChange
      } = this.props;
      const x = position * itemWidth;
      this.ignoreNextScroll = true;

      if (this.refScrollView.current != null) {
        this.refScrollView.current.scrollTo({
          x,
          y: 0,
          animated: true
        });
      }

      if (onChange != null) {
        if (position < 1) {
          onChange(0);
        } else if (position > this.props.data.length) {
          onChange(this.props.data.length - 1);
        } else {
          onChange(position);
        }
      }
    });

    _defineProperty(this, "cancelDelayedSnap", () => {
      clearTimeout(this.timeoutDelayedSnap);
    });

    _defineProperty(this, "setDelayedSnap", timeout => {
      const snapTimeout = timeout || this.props.snapTimeout || this.defaultSnapTimeout;
      const {
        itemWidth
      } = this.props;
      this.cancelDelayedSnap();
      this.timeoutDelayedSnap = setTimeout(() => {
        const nextPosition = Math.round(this.currentPositionX / itemWidth);
        this.scrollToPosition(nextPosition);
      }, snapTimeout);
    });

    _defineProperty(this, "scrollToDefaultIndex", () => {
      if (this.refScrollView.current != null && this.props.defaultIndex != null) {
        const {
          defaultIndex,
          itemWidth,
          data
        } = this.props;

        if (defaultIndex >= data.length) {
          console.warn("@vseslav/react-native-horizontal-picker: 'defaultIndex' is out of range of the array 'data'");
          return;
        }

        const x = defaultIndex * itemWidth;
        this.refScrollView.current.scrollTo({
          x,
          y: 0,
          animated: this.props.animatedScrollToDefaultIndex || false
        });
      }
    });

    this.paddingSide = 0;
    this.refScrollView = /*#__PURE__*/_react.default.createRef();
    this.ignoreNextScroll = false;
    this.timeoutDelayedSnap = 0;
    this.currentPositionX = 0;
    this.state = {
      scrollViewWidth: 0
    };
  }

  render() {
    const _this$props = this.props,
          {
      data,
      renderItem
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["data", "renderItem"]);

    return /*#__PURE__*/_react.default.createElement(_reactNative.ScrollView, _extends({
      horizontal: true,
      showsHorizontalScrollIndicator: false,
      scrollEventThrottle: this.defaultScrollEventThrottle,
      decelerationRate: this.defaultDecelerationRate,
      contentContainerStyle: {
        paddingHorizontal: this.paddingSide
      },
      ref: this.refScrollView,
      onLayout: this.onLayoutScrollView,
      onScroll: this.onScroll,
      onScrollBeginDrag: this.onScrollBeginDrag,
      onScrollEndDrag: this.onScrollEndDrag,
      onMomentumScrollBegin: this.onMomentumScrollBegin,
      onMomentumScrollEnd: this.onMomentumScrollEnd
    }, props), data.map((item, index) => /*#__PURE__*/_react.default.createElement(_reactNative.TouchableWithoutFeedback, {
      onPress: () => this.scrollToPosition(index),
      key: index
    }, /*#__PURE__*/_react.default.createElement(_reactNative.View, null, renderItem(item, index)))));
  }

}

exports.default = HorizontalPicker;
//# sourceMappingURL=index.js.map